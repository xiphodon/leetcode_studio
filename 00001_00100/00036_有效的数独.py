#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2019/6/12 10:43
# @Author  : GuoChang
# @Site    : https://github.com/xiphodon
# @File    : 00036_有效的数独.py
# @Software: PyCharm

"""
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

1、数字 1-9 在每一行只能出现一次。
2、数字 1-9 在每一列只能出现一次。
3、数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/valid-sudoku
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

难度： 中等

执行用时 :64 ms, 在所有Python3提交中击败了92.47%的用户
内存消耗 :13 MB, 在所有Python3提交中击败了94.14%的用户
"""
from typing import List


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        """
        只验证已填入数字是否有效即可
        :param board:
        :return:
        """
        # 验证行
        for i in range(9):
            # i 行索引， j 列索引
            row_set = set()
            for j in range(9):
                v = board[i][j]
                if v != '.':
                    if v in row_set:
                        return False
                    else:
                        row_set.add(v)

        # 验证列
        for i in range(9):
            # i 列索引， j 列索引
            col_set = set()
            for j in range(9):
                v = board[j][i]
                if v != '.':
                    if v in col_set:
                        return False
                    else:
                        col_set.add(v)

        # 验证格子
        for i in range(9):
            # i 小九宫位置索引， j 数字所在位置相对于小九宫的索引
            grid_set = set()
            for j in range(9):
                # _x,_y 为所在小九宫格中的相对位置
                _x1 = j // 3
                _y1 = j % 3

                # x,y 为小九宫在大九宫中的相对位置
                _x2 = i // 3
                _y2 = i % 3

                # x,y 为大九宫中数字的绝对位置
                x = _x2 * 3 + _x1
                y = _y2 * 3 + _y1

                v = board[x][y]
                if v != '.':
                    if v in grid_set:
                        return False
                    else:
                        grid_set.add(v)

        return True


if __name__ == '__main__':
    board_list = [
        ["5", "3", ".", ".", "7", ".", ".", ".", "."],
        ["6", ".", ".", "1", "9", "5", ".", ".", "."],
        [".", "9", "8", ".", ".", ".", ".", "6", "."],
        ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
        ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
        ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
        [".", "6", ".", ".", ".", ".", "2", "8", "."],
        [".", ".", ".", "4", "1", "9", ".", ".", "5"],
        [".", ".", ".", ".", "8", ".", ".", "7", "9"]
    ]

    s = Solution()
    res = s.isValidSudoku(board_list)
    print(res)
